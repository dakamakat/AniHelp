// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace PersistenceMigrations
{
    [DbContext(typeof(AniHelpDbContext))]
    partial class AniHelpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Domain.Entities.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SelfLink")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("Type")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.HasKey("Id");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("Domain.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AbbreviatedTitles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgeRating")
                        .HasColumnType("int");

                    b.Property<string>("AgeRatingGuide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("AverageRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CanonicalTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoverImageTopOffset")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeLength")
                        .HasColumnType("int");

                    b.Property<int>("FavoritesCount")
                        .HasColumnType("int");

                    b.Property<string>("NextRelease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Nsfw")
                        .HasColumnType("bit");

                    b.Property<int>("PopularityRank")
                        .HasColumnType("int");

                    b.Property<int>("RatingRank")
                        .HasColumnType("int");

                    b.Property<int>("ShowType")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tba")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalLength")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<int>("UserCount")
                        .HasColumnType("int");

                    b.Property<string>("YoutubeVideoId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId")
                        .IsUnique();

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<string>("Large")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Original")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Small")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiny")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Domain.Entities.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("Related")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Self")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Domain.Entities.RatingFrequencie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<int>("Eeight")
                        .HasColumnType("int");

                    b.Property<int>("Eighteen")
                        .HasColumnType("int");

                    b.Property<int>("Eleven")
                        .HasColumnType("int");

                    b.Property<int>("Fifteen")
                        .HasColumnType("int");

                    b.Property<int>("Five")
                        .HasColumnType("int");

                    b.Property<int>("Four")
                        .HasColumnType("int");

                    b.Property<int>("Fourteen")
                        .HasColumnType("int");

                    b.Property<int>("Nine")
                        .HasColumnType("int");

                    b.Property<int>("Nineteen")
                        .HasColumnType("int");

                    b.Property<int>("Seven")
                        .HasColumnType("int");

                    b.Property<int>("Seventeen")
                        .HasColumnType("int");

                    b.Property<int>("Six")
                        .HasColumnType("int");

                    b.Property<int>("Sixteen")
                        .HasColumnType("int");

                    b.Property<int>("Ten")
                        .HasColumnType("int");

                    b.Property<int>("Thirteen")
                        .HasColumnType("int");

                    b.Property<int>("Three")
                        .HasColumnType("int");

                    b.Property<int>("Twelwe")
                        .HasColumnType("int");

                    b.Property<int>("Twenty")
                        .HasColumnType("int");

                    b.Property<int>("Two")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId")
                        .IsUnique();

                    b.ToTable("RatingFrequencies");
                });

            modelBuilder.Entity("Domain.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("Domain.Entities.Attribute", b =>
                {
                    b.HasOne("Domain.Entities.Anime", "Anime")
                        .WithOne("Attributes")
                        .HasForeignKey("Domain.Entities.Attribute", "AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Title", "Titles", b1 =>
                        {
                            b1.Property<int>("AttributesId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("En")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("En_jp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("En_us")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ja_jp")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AttributesId");

                            b1.ToTable("Attributes");

                            b1.WithOwner("Attributes")
                                .HasForeignKey("AttributesId");

                            b1.Navigation("Attributes");
                        });

                    b.Navigation("Anime");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.Attribute", "Attributes")
                        .WithMany("Images")
                        .HasForeignKey("AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Domain.Entities.Link", b =>
                {
                    b.HasOne("Domain.Entities.Anime", "Anime")
                        .WithMany("Links")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Domain.Entities.RatingFrequencie", b =>
                {
                    b.HasOne("Domain.Entities.Attribute", "Attributes")
                        .WithOne("RatingFrequencies")
                        .HasForeignKey("Domain.Entities.RatingFrequencie", "AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Domain.Entities.Size", b =>
                {
                    b.HasOne("Domain.Entities.Image", "Image")
                        .WithMany("Sizes")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Domain.Entities.Anime", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("Domain.Entities.Attribute", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("RatingFrequencies");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Navigation("Sizes");
                });
#pragma warning restore 612, 618
        }
    }
}
